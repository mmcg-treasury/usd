# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions: write-all

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
      - name: Cache
        uses: actions/cache@v1.2.1
        with:
          # A directory to store and save the cache
          path: /main
          # An explicit key for restoring and saving the cache
          key: ${{ github.pages }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          restore-keys: # optional
          
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.2
        with:
          # Set always-auth in npmrc
          always-auth:  false
          # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0
          node-version: # optional
          # File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version
          node-version-file: # optional
          # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
          architecture: # optional
          # Set this option if you want the action to check for the latest available version that satisfies the version spec
          check-latest: # optional
          # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN
          registry-url: # optional
          # Optional scope for authenticating against scoped registries
          scope: # optional
          # Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user.
          token: # ${{ github.token }}
          # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm
          cache: # optional
          # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
          cache-dependency-path: # optional
          # Deprecated. Use node-version instead. Will not be supported after October 1, 2019
          version: # optional
          
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v3.0.6
        with:
          # Optional static site generator to attempt to configure: "nuxt", "next", "gatsby", or "sveltekit"
          static_site_generator: # optional
          # Optional file path to static site generator configuration file
          generator_config_file: # optional
          # GitHub token
          token: ${{ github.pages }}
          # Try to enable Pages for the repository if it is not already enabled. This option requires a token other than `GITHUB_TOKEN` to be provided. In the context of a Personal Access Token, the `repo` scope or Pages write permission is required. In the context of a GitHub App, the `administration:write` and `pages:write` permissions are required.
          enablement: true
